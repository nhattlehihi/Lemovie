{"ast":null,"code":"import { getWindow } from 'ssr-window';\nexport default function Resize(_ref) {\n  let {\n    swiper,\n    on,\n    emit\n  } = _ref;\n  const window = getWindow();\n  let observer = null;\n\n  const resizeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('beforeResize');\n    emit('resize');\n  };\n\n  const createObserver = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    observer = new ResizeObserver(entries => {\n      const {\n        width,\n        height\n      } = swiper;\n      let newWidth = width;\n      let newHeight = height;\n      entries.forEach(_ref2 => {\n        let {\n          contentBoxSize,\n          contentRect,\n          target\n        } = _ref2;\n        if (target && target !== swiper.el) return;\n        newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\n        newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\n      });\n\n      if (newWidth !== width || newHeight !== height) {\n        resizeHandler();\n      }\n    });\n    observer.observe(swiper.el);\n  };\n\n  const removeObserver = () => {\n    if (observer && observer.unobserve && swiper.el) {\n      observer.unobserve(swiper.el);\n      observer = null;\n    }\n  };\n\n  const orientationChangeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('orientationchange');\n  };\n\n  on('init', () => {\n    if (swiper.params.resizeObserver && typeof window.ResizeObserver !== 'undefined') {\n      createObserver();\n      return;\n    }\n\n    window.addEventListener('resize', resizeHandler);\n    window.addEventListener('orientationchange', orientationChangeHandler);\n  });\n  on('destroy', () => {\n    removeObserver();\n    window.removeEventListener('resize', resizeHandler);\n    window.removeEventListener('orientationchange', orientationChangeHandler);\n  });\n}","map":{"version":3,"sources":["/Users/admin/Dropbox/My Mac (NhattLe-s-MacBook-Pro.local)/Desktop/Lemovie/node_modules/swiper/core/modules/resize/resize.js"],"names":["getWindow","Resize","_ref","swiper","on","emit","window","observer","resizeHandler","destroyed","initialized","createObserver","ResizeObserver","entries","width","height","newWidth","newHeight","forEach","_ref2","contentBoxSize","contentRect","target","el","inlineSize","blockSize","observe","removeObserver","unobserve","orientationChangeHandler","params","resizeObserver","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import { getWindow } from 'ssr-window';\nexport default function Resize(_ref) {\n  let {\n    swiper,\n    on,\n    emit\n  } = _ref;\n  const window = getWindow();\n  let observer = null;\n\n  const resizeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('beforeResize');\n    emit('resize');\n  };\n\n  const createObserver = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    observer = new ResizeObserver(entries => {\n      const {\n        width,\n        height\n      } = swiper;\n      let newWidth = width;\n      let newHeight = height;\n      entries.forEach(_ref2 => {\n        let {\n          contentBoxSize,\n          contentRect,\n          target\n        } = _ref2;\n        if (target && target !== swiper.el) return;\n        newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\n        newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\n      });\n\n      if (newWidth !== width || newHeight !== height) {\n        resizeHandler();\n      }\n    });\n    observer.observe(swiper.el);\n  };\n\n  const removeObserver = () => {\n    if (observer && observer.unobserve && swiper.el) {\n      observer.unobserve(swiper.el);\n      observer = null;\n    }\n  };\n\n  const orientationChangeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('orientationchange');\n  };\n\n  on('init', () => {\n    if (swiper.params.resizeObserver && typeof window.ResizeObserver !== 'undefined') {\n      createObserver();\n      return;\n    }\n\n    window.addEventListener('resize', resizeHandler);\n    window.addEventListener('orientationchange', orientationChangeHandler);\n  });\n  on('destroy', () => {\n    removeObserver();\n    window.removeEventListener('resize', resizeHandler);\n    window.removeEventListener('orientationchange', orientationChangeHandler);\n  });\n}"]},"metadata":{},"sourceType":"module"}