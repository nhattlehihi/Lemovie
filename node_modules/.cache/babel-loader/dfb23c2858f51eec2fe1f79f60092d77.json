{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Dropbox/My Mac (NhattLe-s-MacBook-Pro.local)/Desktop/Lemovie/src/components/movie-grid/MovieGrid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport './movie-grid.scss';\nimport MovieCard from '../movie-card/MovieCard';\nimport { useParams } from 'react-router-dom';\nimport tmdbApi, { category, movieType, tvType } from '../../api/tmdbApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieGrid = props => {\n  _s();\n\n  const [items, setItems] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(0);\n  const {\n    keyword\n  } = useParams();\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n      const params = {};\n\n      if (keyword === undefined) {\n        switch (props.category) {\n          case category.movie:\n            response = await tmdbApi.getMoviesList(movieType.upcoming, {\n              params\n            });\n            break;\n\n          default:\n            response = await tmdbApi.getTvList(tvType.popular, {\n              params\n            });\n        }\n      } else {\n        const params = {\n          query: keyword\n        };\n        response = await tmdbApi.search(props.category, {\n          params\n        });\n      }\n\n      console.log(response);\n      setItems(response.results);\n      setTotalPage(response.total_pages);\n    };\n\n    getList();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-grid\",\n    children: items.map((item, i) => /*#__PURE__*/_jsxDEV(MovieCard, {\n      item: item,\n      category: props.category\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 40\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MovieGrid, \"oOvENlLw5AxBdHpqwEicfrCE0uk=\", false, function () {\n  return [useParams];\n});\n\n_c = MovieGrid;\nexport default MovieGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieGrid\");","map":{"version":3,"sources":["/Users/admin/Dropbox/My Mac (NhattLe-s-MacBook-Pro.local)/Desktop/Lemovie/src/components/movie-grid/MovieGrid.jsx"],"names":["React","useEffect","useState","Swiper","SwiperSlide","MovieCard","useParams","tmdbApi","category","movieType","tvType","MovieGrid","props","items","setItems","page","setPage","totalPage","setTotalPage","keyword","getList","response","params","undefined","movie","getMoviesList","upcoming","getTvList","popular","query","search","console","log","results","total_pages","map","item","i"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,MAAR,EAAgBC,WAAhB,QAAkC,cAAlC;AAEA,OAAO,mBAAP;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,OAAP,IAAkBC,QAAlB,EAA4BC,SAA5B,EAAuCC,MAAvC,QAAqD,mBAArD;;;AACA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AAAA;;AACvB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM;AAACiB,IAAAA;AAAD,MAAYb,SAAS,EAA3B;AACAL,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMmB,OAAO,GAAG,YAAY;AACxB,UAAIC,QAAQ,GAAG,IAAf;AACA,YAAMC,MAAM,GAAG,EAAf;;AACA,UAAGH,OAAO,KAAKI,SAAf,EAA0B;AACtB,gBAAOX,KAAK,CAACJ,QAAb;AACI,eAAKA,QAAQ,CAACgB,KAAd;AACIH,YAAAA,QAAQ,GAAG,MAAMd,OAAO,CAACkB,aAAR,CAAsBhB,SAAS,CAACiB,QAAhC,EAA0C;AAACJ,cAAAA;AAAD,aAA1C,CAAjB;AACA;;AACJ;AACID,YAAAA,QAAQ,GAAG,MAAMd,OAAO,CAACoB,SAAR,CAAkBjB,MAAM,CAACkB,OAAzB,EAAkC;AAACN,cAAAA;AAAD,aAAlC,CAAjB;AALR;AAOH,OARD,MAQO;AACC,cAAMA,MAAM,GAAG;AACfO,UAAAA,KAAK,EAAGV;AADO,SAAf;AAGJE,QAAAA,QAAQ,GAAG,MAAMd,OAAO,CAACuB,MAAR,CAAelB,KAAK,CAACJ,QAArB,EAA+B;AAACc,UAAAA;AAAD,SAA/B,CAAjB;AACH;;AACDS,MAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AACAP,MAAAA,QAAQ,CAACO,QAAQ,CAACY,OAAV,CAAR;AACAf,MAAAA,YAAY,CAACG,QAAQ,CAACa,WAAV,CAAZ;AACC,KApBL;;AAqBId,IAAAA,OAAO;AACV,GAvBI,EAyBR,EAzBQ,CAAT;AA2BA,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,cAEQP,KAAK,CAACsB,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,kBAAa,QAAC,SAAD;AAAW,MAAA,IAAI,EAAED,IAAjB;AAAuB,MAAA,QAAQ,EAAExB,KAAK,CAACJ;AAAvC,OAAsD6B,CAAtD;AAAA;AAAA;AAAA;AAAA,YAAvB;AAFR;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAzCD;;GAAM1B,S;UAKgBL,S;;;KALhBK,S;AA2CN,eAAeA,SAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {Swiper, SwiperSlide} from 'swiper/react'\n\nimport './movie-grid.scss';\nimport MovieCard from '../movie-card/MovieCard';\nimport { useParams } from 'react-router-dom';\nimport tmdbApi, { category, movieType, tvType } from '../../api/tmdbApi';\nconst MovieGrid = props => {\n    const [items, setItems] = useState([]);\n\n    const [page, setPage] = useState(1);\n    const [totalPage, setTotalPage] = useState(0);\n    const {keyword} = useParams();\n    useEffect(() => {\n        const getList = async () => {\n            let response = null;\n            const params = {};\n            if(keyword === undefined) {\n                switch(props.category) {\n                    case category.movie:\n                        response = await tmdbApi.getMoviesList(movieType.upcoming, {params})\n                        break;\n                    default: \n                        response = await tmdbApi.getTvList(tvType.popular, {params});\n                }\n            } else {\n                    const params = {\n                    query : keyword\n                }\n                response = await tmdbApi.search(props.category, {params});\n            }\n            console.log(response)\n            setItems(response.results);\n            setTotalPage(response.total_pages);\n            }\n            getList();\n        }\n\n    ,[]);\n\n    return (\n        <div className=\"movie-grid\">\n            {\n                items.map((item, i) => <MovieCard item={item} category={props.category} key={i}/>)\n            }\n            \n        </div>\n    )\n}\n\nexport default MovieGrid\n"]},"metadata":{},"sourceType":"module"}