{"ast":null,"code":"var _jsxFileName = \"/Users/admin/tiktok/src/components/movie-list/MovieList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport './movielist.scss';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Link } from 'react-router-dom';\nimport Button from '../button/Button';\nimport tmdbApi, { category } from '../../api/tmdbApi';\nimport apiConfig from '../../api/apiConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieList = props => {\n  _s();\n\n  const [items, setItems] = useState([]);\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n      const params = {\n        page: 1\n      };\n      response = await tmdbApi.getMoviesList(props.type, {\n        params\n      }); // if(props.type !== 'similar') {\n      //     switch(props.category){\n      //         case category.movie:\n      //             response = await tmdbApi.getMoviesList(props.type,{params});\n      //             break;\n      //         default: \n      //         response = await tmdbApi.getTvList(props.type,{params});\n      //     }\n      // } else {\n      //     response = await tmdbApi.similar(props.category,props.id);\n      // }\n\n      setItems(response.results);\n    };\n\n    getList();\n  }, []);\n  console.log(items);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-list\",\n    children: /*#__PURE__*/_jsxDEV(Swiper, {\n      grabCursor: true,\n      spaceBetween: 10,\n      slidesPerView: 'auto',\n      children: items.map((item, id) => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: apiConfig.w500Image(item.poster_path),\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 29\n        }, this)\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MovieList, \"E85yb7BhBnl3/OpymRdjFiQJ97s=\");\n\n_c = MovieList;\nMovieList.propTypes = {\n  category: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired\n};\nexport default MovieList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"sources":["/Users/admin/tiktok/src/components/movie-list/MovieList.jsx"],"names":["React","useState","useEffect","useRef","PropTypes","Swiper","SwiperSlide","Link","Button","tmdbApi","category","apiConfig","MovieList","props","items","setItems","getList","response","params","page","getMoviesList","type","results","console","log","map","item","id","w500Image","poster_path","propTypes","string","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAmCC,MAAnC,QAAgD,OAAhD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,kBAAP;AACA,SAAQC,MAAR,EAAgBC,WAAhB,QAAkC,cAAlC;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,OAAP,IAAiBC,QAAjB,QAAgC,mBAAhC;AACA,OAAOC,SAAP,MAAsB,qBAAtB;;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AAAA;;AAEnB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMc,OAAO,GAAG,YAAY;AACxB,UAAIC,QAAQ,GAAG,IAAf;AAEA,YAAMC,MAAM,GAAG;AAACC,QAAAA,IAAI,EAAC;AAAN,OAAf;AAEAF,MAAAA,QAAQ,GAAG,MAAMR,OAAO,CAACW,aAAR,CAAsBP,KAAK,CAACQ,IAA5B,EAAiC;AAACH,QAAAA;AAAD,OAAjC,CAAjB,CALwB,CAMxB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEAH,MAAAA,QAAQ,CAACE,QAAQ,CAACK,OAAV,CAAR;AACH,KArBD;;AAsBAN,IAAAA,OAAO;AAGV,GA1BQ,EA0BP,EA1BO,CAAT;AA2BAO,EAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACJ,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACI,QAAC,MAAD;AACI,MAAA,UAAU,EAAE,IADhB;AAEI,MAAA,YAAY,EAAE,EAFlB;AAGI,MAAA,aAAa,EAAE,MAHnB;AAAA,gBAMQA,KAAK,CAACW,GAAN,CAAU,CAACC,IAAD,EAAMC,EAAN,kBACN,QAAC,WAAD;AAAA,+BACI;AAAK,UAAA,GAAG,EAAEhB,SAAS,CAACiB,SAAV,CAAoBF,IAAI,CAACG,WAAzB,CAAV;AAAiD,UAAA,GAAG,EAAC;AAArD;AAAA;AAAA;AAAA;AAAA;AADJ,SAAkBF,EAAlB;AAAA;AAAA;AAAA;AAAA,cADJ;AANR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH,CAnDD;;GAAMf,S;;KAAAA,S;AAqDNA,SAAS,CAACkB,SAAV,GAAsB;AAClBpB,EAAAA,QAAQ,EAAEN,SAAS,CAAC2B,MAAV,CAAiBC,UADT;AAElBX,EAAAA,IAAI,EAAEjB,SAAS,CAAC2B,MAAV,CAAiBC;AAFL,CAAtB;AAKA,eAAepB,SAAf","sourcesContent":["import React, {useState, useEffect,useRef} from 'react'\nimport PropTypes from 'prop-types'\nimport './movielist.scss'\nimport {Swiper, SwiperSlide} from 'swiper/react'\nimport {Link} from 'react-router-dom'\nimport Button from '../button/Button'\nimport tmdbApi, {category} from '../../api/tmdbApi'\nimport apiConfig from '../../api/apiConfig'\n\nconst MovieList = props => {\n\n        const [items, setItems] = useState([]);\n\n        useEffect(() => {\n            const getList = async () => {\n                let response = null;\n                \n                const params = {page:1};\n\n                response = await tmdbApi.getMoviesList(props.type,{params});\n                // if(props.type !== 'similar') {\n                //     switch(props.category){\n                //         case category.movie:\n                //             response = await tmdbApi.getMoviesList(props.type,{params});\n                //             break;\n\n                //         default: \n                //         response = await tmdbApi.getTvList(props.type,{params});\n                //     }\n                // } else {\n                //     response = await tmdbApi.similar(props.category,props.id);\n         \n                // }\n                \n                setItems(response.results);\n            }\n            getList();\n           \n\n        },[]);\n        console.log(items)\n    return (\n        <div className=\"movie-list\">\n            <Swiper\n                grabCursor={true}\n                spaceBetween={10}\n                slidesPerView={'auto'}\n            >\n                {\n                    items.map((item,id) => (\n                        <SwiperSlide key={id}>\n                            <img src={apiConfig.w500Image(item.poster_path)} alt=\"\" />\n                        </SwiperSlide>\n                    ))\n                }\n\n            </Swiper>\n            \n        </div>\n    )\n}\n\nMovieList.propTypes = {\n    category: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired\n}\n\nexport default MovieList\n"]},"metadata":{},"sourceType":"module"}