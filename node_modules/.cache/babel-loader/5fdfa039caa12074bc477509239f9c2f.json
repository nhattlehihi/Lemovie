{"ast":null,"code":"var _jsxFileName = \"/Users/admin/tiktok/src/components/movie-list/MovieList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport './movielist.scss';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Link } from 'react-router-dom';\nimport Button from '../button/Button';\nimport tmdbApi, { category } from '../../api/tmdbApi';\nimport apiConfig from '../../api/apiConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieList = props => {\n  _s();\n\n  const [items, setItems] = useState([]);\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n      const params = {};\n\n      if (props.type !== 'similar') {\n        switch (props.category) {\n          case category.movie:\n            response = await tmdbApi.getMoviesList(props.type, {\n              params\n            });\n            break;\n\n          default:\n            response = await tmdbApi.getTvList(props.type, {\n              params\n            });\n        }\n      } else {\n        response = await tmdbApi.similar(props.category, {\n          params\n        });\n      } // setItems(response.results);\n\n    };\n\n    getList();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MovieList, \"E85yb7BhBnl3/OpymRdjFiQJ97s=\");\n\n_c = MovieList;\nMovieList.propTypes = {\n  category: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired\n};\nexport default MovieList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"sources":["/Users/admin/tiktok/src/components/movie-list/MovieList.jsx"],"names":["React","useState","useEffect","useRef","PropTypes","Swiper","SwiperSlide","Link","Button","tmdbApi","category","apiConfig","MovieList","props","items","setItems","getList","response","params","type","movie","getMoviesList","getTvList","similar","propTypes","string","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAmCC,MAAnC,QAAgD,OAAhD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,kBAAP;AACA,SAAQC,MAAR,EAAgBC,WAAhB,QAAkC,cAAlC;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,OAAP,IAAiBC,QAAjB,QAAgC,mBAAhC;AACA,OAAOC,SAAP,MAAsB,qBAAtB;;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AAAA;;AAEnB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMc,OAAO,GAAG,YAAY;AACxB,UAAIC,QAAQ,GAAG,IAAf;AACA,YAAMC,MAAM,GAAG,EAAf;;AAEA,UAAGL,KAAK,CAACM,IAAN,KAAe,SAAlB,EAA6B;AACzB,gBAAON,KAAK,CAACH,QAAb;AACI,eAAKA,QAAQ,CAACU,KAAd;AACIH,YAAAA,QAAQ,GAAG,MAAMR,OAAO,CAACY,aAAR,CAAsBR,KAAK,CAACM,IAA5B,EAAiC;AAACD,cAAAA;AAAD,aAAjC,CAAjB;AACA;;AAEJ;AACAD,YAAAA,QAAQ,GAAG,MAAMR,OAAO,CAACa,SAAR,CAAkBT,KAAK,CAACM,IAAxB,EAA6B;AAACD,cAAAA;AAAD,aAA7B,CAAjB;AANJ;AAQH,OATD,MASO;AACHD,QAAAA,QAAQ,GAAG,MAAMR,OAAO,CAACc,OAAR,CAAgBV,KAAK,CAACH,QAAtB,EAA+B;AAACQ,UAAAA;AAAD,SAA/B,CAAjB;AAEH,OAhBuB,CAkBxB;;AACH,KAnBD;;AAoBAF,IAAAA,OAAO;AAGV,GAxBQ,EAwBP,EAxBO,CAAT;AAyBJ,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAlCD;;GAAMJ,S;;KAAAA,S;AAoCNA,SAAS,CAACY,SAAV,GAAsB;AAClBd,EAAAA,QAAQ,EAAEN,SAAS,CAACqB,MAAV,CAAiBC,UADT;AAElBP,EAAAA,IAAI,EAAEf,SAAS,CAACqB,MAAV,CAAiBC;AAFL,CAAtB;AAKA,eAAed,SAAf","sourcesContent":["import React, {useState, useEffect,useRef} from 'react'\nimport PropTypes from 'prop-types'\nimport './movielist.scss'\nimport {Swiper, SwiperSlide} from 'swiper/react'\nimport {Link} from 'react-router-dom'\nimport Button from '../button/Button'\nimport tmdbApi, {category} from '../../api/tmdbApi'\nimport apiConfig from '../../api/apiConfig'\n\nconst MovieList = props => {\n\n        const [items, setItems] = useState([]);\n\n        useEffect(() => {\n            const getList = async () => {\n                let response = null;\n                const params = {};\n\n                if(props.type !== 'similar') {\n                    switch(props.category){\n                        case category.movie:\n                            response = await tmdbApi.getMoviesList(props.type,{params});\n                            break;\n\n                        default: \n                        response = await tmdbApi.getTvList(props.type,{params});\n                    }\n                } else {\n                    response = await tmdbApi.similar(props.category,{params});\n         \n                }\n                \n                // setItems(response.results);\n            }\n            getList();\n           \n\n        },[]);\n    return (\n        <div>\n            \n        </div>\n    )\n}\n\nMovieList.propTypes = {\n    category: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired\n}\n\nexport default MovieList\n"]},"metadata":{},"sourceType":"module"}